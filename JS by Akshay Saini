
// How Javascript works?
   Everthing in javascript happens inside an Execution context
   Execution context is a big container in which whole javascript code is executed.
   Executuion context containing two component
   
  -----------------EXECUTION CONTEXT---------------------------
   1. Memmory/Variable Environment  2.Code/Thread of Execution
      key:value                       >>>........code
      a:10                            >>>........code
      f:{...}                         >>>........code
    ---------------EXECUTION CONTEXT---------------------------
    
    Javascript is a synchronus single-threaded language.
----------------------------------------------------------------------------------------------------------------------------------------
//How Javascript code is executedü§î? what is call stacküí≠?
  js code is executed line by line first it goes in memmory creation phase in that everything is undefine then second it goes inside 
  code phase then everything is run and the value is assigned to the variable/function 
  
  EXAMPLE:-----program to findout the square of number
               var n = 2;
               function square(num) {
                 var ans = num * num ;
                 return ans;
                }
                var square2 = square(n);
                var square4 = square(4);
   ------------------------------------------------------
   Memory                               Code
   n:undefine--2--4                 ------------------------
   square:{....}                    |  Memory       code     
   square2:undefine-->4             |  num :2--4       >>...
   square4:undefine-->16            |  ans :4--16      >>..
       
//what is callStack
The call stack is used by JavaScript to keep track of multiple function calls.
Example:-    function one() {
                  two();
              }
              function two() {
                   three();
              }
              function three() {
                  console.log("call stack");
               }
               
               
               |      |     |      |    |three()|       |      |      |     |     |     |
               |      |     |two() |    |two()  |       |two() |      |     |     |     |
               | one()|     |one() |    |one()  |       |one() |      |one()|     |     |
               |------|     |------|    |-------|       |------|      |-----|     |-----|
----------------------------------------------CALLSTACK------------------------------------

//what is Hosting in javascript?
  Hoisting is JavaScript's default behavior of moving all declarations to the top of the current scope (to the top of the 
  current script or the current function).
  Variables defined with let and const are hoisted to the top of the block, but not initialized.
  
  let variable before it is declared will result in a ReferenceError.
  The variable is in a "temporal dead zone" from the start of the block until it is declared.
  console.log(sum);
  let sum = a+b;    //reference error
  
  Using a const variable before it is declared, is a syntax error, so the code will simply not run.
  console.log(sum);
  const sum = 10; ///syntax error
  
  javascript doesn't host the function expressions and arrow function
  function expression: name();
                       var name = function() {
                         console.log("hello from function expression");
                        }
                        
  Arrow function : name();
                   var name = () => {
                      console.log("hello from arrow function")
                   }
---------------------------------------------UNDEFINE vs NOT DEFINED---------------------------------------------------
"undefined" indicates that a variable has been declared but not given a value,
while "not defined" indicates that a variable does not exist

console.log(a);       //undefined
var a = 10;
console.log(a);       //10
console.log(x);      //not defined
                   
In my words:- undefine means browser give the memory location to variable "a" but on line no 82 it has not assign the value that why 
              it is giving undefine and in case of x, x is not declared it is not assign any memory loaction that's why not defined.
             
--------------------------------------This in function-------------------------------------------------------------------
console.log("hello")           //hello
 
console.log(this);             //window object

function fun() {
    console.log(this);       //when we write this inside fun it will find its obj but here is no obj then it will print window obj 
}
fun()

var name = "ritu";

let obj = {
    name:"ravie",
    func1() {
        console.log(this.name);        //it is present inside obj thats why it refer that obj and print ravie
    },
    func2: () => {
       console.log(this.name);       //this is arrow fun which is not pointing this obj it will go for window obj and print ritu
    }
}
obj.func1();
obj.func2();

// console.log("hello")
 
// console.log(this);

// function fun() {
//     console.log(this);
// }
// fun()

// var name = "ritu";

// let obj = {
//     name:"ravie",
//     func1() {
//         console.log(this.name);
//     },
//     func2: () => {
//        console.log(this.name);
//     }
// }
// obj.func1();
// obj.func2();

// function ritu() {
//     console.log(this);    //window object
//     function riya() {
//         console.log(this)      //window object
//     }
//     riya()
// }
// ritu();

const obj = {
    xyz : function() {
        console.log(this)   //obj i.e refrence of parent obj
        function p() {
            console.log(this)   //print window object
            const obj2 = {
                name : "ritu",
                q() {
                    console.log(this)     //obj2 
                    const r = () => {
                        console.log(this)  //it is arrow fun and it is printing obj2 because 
                                          //this in arrow function behave accouring to it lecical parent
                       console.log("this is started now there are lots of thing to known");
                   }
                    r();
                },
                
            }
            obj2.q();
        }
        p()   
    }
}
obj.xyz()
//note :- "this" in arrow function behave accourding to its lecical parents not necessary it always point window object
           some time its pointing to object it because of lecical scoping 

---------------------------------------The Scope chain, Scope and Lexical Environment---------------------------------------

The scope chain is a way to link or provide a systematic access to all variables and other functions that 
the current execution context (function in this case) has access to

code :-
        function a(){                       |                       |
        var b = 10;                         |   |memory  code |     |
          function c() {             c()=>  |   |c.log(b)     |     |
              console.log(b)                |   |üü®           |     |
            }                               |   |--------------     |
         c()                                |                       | 
        }                                   |   |memory   code |    |
        a()                                 |   | b:u=10       |    |
                                     a() => |   | c: {..}      |    |
                                            |   | üü®          |    |
                                            |   |--------------|    |
                                            |                       |
                                            |   |memory    code|    |
                                            |   |a:{...}       |    |
                                     gec    |   |üü®           |    |
                                            |   |--------------|    |
                                            |-----------------------|

in this case a global execution context is created inside that we have a() function then gec of a() in that we have
b and another function c() inside c() fun we are loging b , but b is not present inside c() fun then it goes for its
lecical scope and found that b is present and then it is printing b as 10 it becase of scoping.....üòÆ‚Äçüí®

-----------------------------------What is Temporal Deadüòµ Zone‚ò†Ô∏è----------------------------------------------------

Temporal Dead Zone is the period of time during which the let and const declarations cannot be accessed. 
Temporal Dead Zone starts when the code execution enters the block which contains the let or const declaration and
continues until the declaration has executed.

console.log(a); ---------------
                               |temporal dead zone|
let a = 10;--------------------

var b = 100;

---------------------------------let and const declaration are hoistedü§î?------------------------------------------------

Variables defined with let and const are hoisted to the top of the block, but not initialized.

Meaning: The block of code is aware of the variable, but it cannot be used until it has been declared.

Using a let variable before it is declared will result in a ReferenceError.

The variable is in a "temporal dead zone" from the start of the block until it is declared:

console.log(a);   //reference error
let a = 10;   

const variable before it is declared, is a syntax error, so the code will simply not run.

console.log(b);   // syntax error
const b = 20;

-------------------------------syntax errorüò§ VS reference errorüò§ VS type error--------------------------------------------

Syntax error:-An exception caused by the incorrect use of a pre-defined syntax. 
              Syntax errors are detected while compiling or parsing source code.
              For example, 
              if we leave off a closing brace ( } ) when defining a JavaScript function, then we get a syntax error.

Reference error:- The ReferenceError object represents an error when a variable that doesn't exist (or hasn't yet been initialized)
                  in the current scope is referenced.
                  console.log(a);  //refrence error
                  let a = 10;
                  console.log(x);  // x is not present in the code then also it will give reference error 
Type Error:- The TypeError object represents an error when an operation could not be performed, typically (but not exclusively)
             when a value is not of the expected type.
             
***Difference between syntax error reference error type error*******
ReferenceError: Raised when an invalid reference is used.
SyntaxError: Raised when a syntax error occurs while parsing JavaScript code. 
TypeError: Raised when the type of a variable is not as expected. 

-------------------------------------what are BLOCKüòµ and SHADOWINGü§î in js--------------------------------------------------------

what is block?
block is define by currly braces "{}".
blocks are also known as compund statement.

what is block scope?
all the variables and function we can access inside the block are know as block scope.

console.log("Hello, World!");
var a = 10; 
{
   var a = 100;
   let b = 20;
   const c = 30;
   console.log(a);   //100
   console.log(b);  //20
   console.log(c);   //30
 }
  console.log(a);   // 100
  console.log(b);   // refrence Error i.e b is not define
  console.log(c);     // Error i.e c is not define 

why this is happening ü§î?
because let and const are having block scope i.e we can't access outside the currly brackect "{}"

NOTE:- here a is assign as 10 but after it goes to line no 263 is become 100 and after completing the backet then also a is 100
       why??? because a is assign as global variable that can access anywhere in code.

what is shadowing in js ?
In programming, shadowing occurs when a variable declared in a certain scope (e.g. a local variable) has the same name as a 
variable in an outer scope(e.g. a global variable). When this happens, the outer variable is said to be shadowed by the inner variable.

Example:
var a = 10;
let b = 20;
const c = 30;
{
  var a = 100;
  let b = 200;
  const c = 300;
  console.log(a);  //100
  console.log(b);   //200
  console.log(c);   //300
}
console.log(a)  //100
console.log(b)  //20
console.log(c)   //30

----------------------------------------------------Closures ----------------------------------------------------------------
What is Closures?
functions bundled together with its lexical environment is called Clousers.
                           OR
A function which is bind together with its lecical environment is called Clousers.

Example:-
 function x() {
   var a= 7;
   function y() {
     console.log(a);
   }
   y();
 }
 x();
 ///the output is 7 the function y is lecicaly bundel with function x.

 function x() {
   var a= 17;
   function y() {
     console.log(a);
   }
   return y;
 }
 var z = x();
 console.log(z)
 z()
 //the output is 17 now in this case the fun x is stored inside variable z and then called that function

 function x() {
   var a = 23;
   function y() {
     console.log(a);
   }
   a= 100;
   return y;
 }
 var z = x();
 console.log(z);
 z()
//the output is 100

function z() {
  var b = 300;
  function x(){
    var a = 15;
    function y() {
      console.log(a,b);
    }
    y();
  }
  x();
}
z();
// the output is 15 and 300
